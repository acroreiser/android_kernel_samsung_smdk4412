#!/sbin/sh

# AnyKernel2 Backend Script
#
# Original and credits: osm0sis @ xda-developers
#
# Modified by Lord Boeffla, 30.06.2016
#
# Modified by acroreiser, 2019-2024

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;


## internal functions

ui_print()
{
	until [ ! "$1" ]; do
		echo -e "ui_print $1\nui_print" > $OUTFD;
		shift;
	done;
}

show_progress()
{
	echo "progress $1 $2" > $OUTFD;
}

set_perm_recursive()
{
	dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');

	for i in $dirs; do
		chown -R $1.$2 $i; chown -R $1:$2 $i;
		find "$i" -type d -exec chmod $3 {} +;
		find "$i" -type f -exec chmod $4 {} +;
	done;
}

file_getprop()
{
	grep "^$2" "$1" | cut -d= -f2;
}

getprop()
{
	test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1;
}

abort()
{
	ui_print " ";
	ui_print "$*";
	umount /system;
	umount /data;
	exit 1;
}

## start of main script

show_progress 1.34 4;
ui_print " ";

mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";

if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
	abort "Error - unzip failed. Aborting.";
fi;

chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;

ui_print "###kernelname###";
ui_print " ";
ui_print '###copyright###';
ui_print " ";
ui_print "###buildinfo###";
ui_print " ";
ui_print "###sourcecode###";
ui_print " ";

ui_print "* Installing kernel...";
ui_print " ";

for i in $($bb --list); do
	$bb ln -s $bb /tmp/anykernel/bin/$i;
done;

if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
	abort "Recovery busybox setup failed. Aborting.";
fi;

PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;

if [ $? != "0" ]; then
	abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.bootmenu)" == 1 ]; then
	ui_print "* Installing a simple boot menu";
        mount /cache;
	rm -fr /cache/menu;
	rm -fr /cache/etc;
	rm -fr /cache/dev;
	rm -fr /cache/mnt;
        mkdir /cache/dev;
        mkdir /cache/mnt;
        mkdir /cache/etc;
        mkdir /cache/etc/terminfo;
        mkdir /cache/etc/terminfo/l;

	cp /tmp/anykernel/menu/linux /cache/etc/terminfo/l;
	cp /tmp/anykernel/menu/menu /cache;
	chmod -R 0755 /cache/etc /cache/menu;
	chmod 0644 /cache/etc/terminfo/l/linux;
	umount /cache;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
	rm -rf /tmp/anykernel;
fi;

umount /system;
umount /data;
ui_print "* Finished, please reboot.";
ui_print " ";
